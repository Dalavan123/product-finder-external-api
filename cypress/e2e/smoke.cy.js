// cypress/e2e/smoke.cy.js

/**
 * ‚úÖ Vad √§r detta?
 * Ett superenkelt ‚Äúsmoke test‚Äù som kollar att appen *√∂ver huvud taget* fungerar:
 * 1) Vi g√•r direkt till en detaljsida (/product/1).
 * 2) Vi ser till att appen h√§mtar produktlistan (GET /products?limit=100).
 *    - I MOCK-l√§ge svarar vi sj√§lva med testdata (f√∂ruts√§gbart och stabilt).
 *    - I REAL-l√§ge l√•ter vi appen prata med riktiga DummyJSON (bara ‚Äúspionerar‚Äù).
 * 3) Vi verifierar att en rubrik visas (dvs. sidan faktiskt renderas).
 * 4) Vi klickar p√• ‚ÄúTillbaka‚Äù och ser att vi hamnar p√• ‚Äú/‚Äù.
 *
 * üí° Varf√∂r detaljsidan f√∂rst?
 * Din detaljsida anv√§nder list-cachen (fetchProductById h√§mtar fr√•n listan under huven),
 * d√§rf√∂r r√§cker det att tvinga fram *ett* list-anrop f√∂re detaljvyn f√∂r att produkten ska finnas.
 *
 * üîÅ Tv√• testl√§gen
 * - MOCK (default): stabilt, funkar offline. Vi interceptar och skickar fixtures.
 * - REAL: riktiga n√§tanrop. Bra f√∂r ‚Äúr√∂kprov‚Äù mot verkligheten.
 *   S√§tt USE_REAL_API=true n√§r du startar Cypress f√∂r detta.
 */

const useReal = Cypress.env('USE_REAL_API') === true; // styr mock vs real med env-var
const PRODUCTS_URL = '**/products?limit=100'; // ** matchar b√•de absoluta/relativa URL:er

describe('smoke', () => {
  it('detaljvyn laddar och visar titel', () => {
    if (!useReal) {
      // MOCK-L√ÑGE: vi svarar sj√§lva p√• GET /products?limit=100 med fixtures
      // ‚ûú f√∂ruts√§gbart (samma data varje g√•ng), inget beroende av n√§tet
      cy.fixture('dummyjson.products.json').then(fx => {
        cy.intercept('GET', PRODUCTS_URL, {
          statusCode: 200,
          body: { products: fx.products }, // samma form som DummyJSONs /products
        }).as('getProducts'); // alias s√• vi kan cy.wait('@getProducts')
      });
    } else {
      // REAL-L√ÑGE: ‚Äúspionera‚Äù p√• n√§tanropet men *inte* √§ndra svaret
      // ‚ûú vi kan fortfarande v√§nta p√• att requesten sker med cy.wait('@getProducts')
      cy.intercept('GET', PRODUCTS_URL).as('getProducts');
    }

    // Bes√∂k detaljsidan F√ñRST. Innan appen hinner k√∂ra:
    // - __BYPASS_PRODUCT_CACHE__ = true ‚Üí tvingar bort in-memory-cachen i apiClient
    // - __clearProductCacheForTests()   ‚Üí nollst√§ller cachen helt
    // Det g√∂r att appen *m√•ste* h√§mta listan (bra: vi kan v√§nta p√• det).
    cy.visit('/product/1', {
      onBeforeLoad(win) {
        win.__BYPASS_PRODUCT_CACHE__ = true;
        win.__clearProductCacheForTests?.();
      },
    });

    // V√§nta tills listan h√§mtats (mock eller real). Vi accepterar 200-svar.
    cy.wait('@getProducts', { timeout: 15_000 })
      .its('response.statusCode')
      .should('be.oneOf', [200]);

    // Minsta m√∂jliga kontroll av detaljsidan:
    // ‚Äì vi f√∂rv√§ntar oss att n√•gon rubrik syns (h1/h2/h3 eller .card-title)
    cy.get('h1,h2,h3,.card-title', { timeout: 15_000 }).should('be.visible');

    // Klicka p√• l√§nken ‚ÄúTillbaka‚Äù och kontrollera att vi hamnar p√• /
    cy.contains('a', /tillbaka/i).click();
    cy.location('pathname').should('eq', '/');
  });
});
